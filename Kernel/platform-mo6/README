MO5N/6 Experiment
=================

This is sort of a TO8 but with the memory map messed around and some other adjustments
for MO5 compatibility. The MO5 doesn't have the needed RAM or mappings.

Memory Map:

0000-1FFF	Kernel / Video (can move video but this stays bank 0)
2000-20FF	Workspace for ROM monitor
2100-5FFF	Fixed RAM		(Bank 1)
6000-9FFF	Banked kernel/User
A000-AFFF	I/O / ROM
B000-EFFF	Kernel cartridge / common (can be banked cart RAM with the right cart, or banked main RAM)
F000-FFFF	Monitor

User Space

0000-1FFF	Video (40 col 1 page mode)
2000-20FF	Monitor
2100-5FFF	User low (copied from paging bank)
6000-9FFF	User high (pageable)
A000-AFFF	I/O
B000-EFFF	Kernel | Common space
F000-FFFF	Monitor

Kernel Space

0000-1FFF	Kernel
2000-20FF	Monitor
2100-5FFF	User low (udata etc too)
6000-9FFF	Kernel
A000-AFFF	I/O
B000-EFFF	Kernel
F000-FFFF	Monitor

(very fragmented)

Pages are used
0	Fixed for 2 x 8K views of 0000-1FFF
1	Fixed at 2000-5FFF
2	Kernel upper segment and common
3	Kernel lower segment

4,5	Process 1
6,7	Process 2

The 5N cartridge can apparently allow another 4 x 16K top memory banks which could be used as the copy banks
(so 4,5,6,7 would be paged in and cart 1-4 the copy banks)

We use the monitor SWI interface as much as we can for size. In particular

SWI 0 (reset)
SWI 4/6 to switch video RAM
SWI A for the keyboard
SWI to plot characters
SWI for joystick
SWI for printer ?
SWI for floppy disk raw sector I/O

Need to steal the timer and IRQ somehow whilst not breaking the monitor when
we return in weird ways on a task switch.

Cartridge apparently runs from 0xEFFE/EFFF on boot
